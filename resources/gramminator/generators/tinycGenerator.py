# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class tinycGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def program(self, parent=None):
        with RuleContext(self, UnparserRule(name='program', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    self.statement(parent=current)
            self.EOF(parent=current)
            return current
    program.min_depth = 1

    def statement(self, parent=None):
        with RuleContext(self, UnparserRule(name='statement', parent=parent)) as current:
            with AlternationContext(self, [7, 7, 7, 7, 0, 6, 0], [1, 1, 1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    UnlexerRule(src='if', parent=current)
                    self.paren_expr(parent=current)
                    self.statement(parent=current)
                elif choice0 == 1:
                    UnlexerRule(src='if', parent=current)
                    self.paren_expr(parent=current)
                    self.statement(parent=current)
                    UnlexerRule(src='else', parent=current)
                    self.statement(parent=current)
                elif choice0 == 2:
                    UnlexerRule(src='while', parent=current)
                    self.paren_expr(parent=current)
                    self.statement(parent=current)
                elif choice0 == 3:
                    UnlexerRule(src='do', parent=current)
                    self.statement(parent=current)
                    UnlexerRule(src='while', parent=current)
                    self.paren_expr(parent=current)
                    UnlexerRule(src=';', parent=current)
                elif choice0 == 4:
                    UnlexerRule(src='{', parent=current)
                    if self._max_depth >= 1:
                        for _ in self._model.quantify(current, 0, min=0, max=inf):
                            self.statement(parent=current)
                    UnlexerRule(src='}', parent=current)
                elif choice0 == 5:
                    self.expr(parent=current)
                    UnlexerRule(src=';', parent=current)
                elif choice0 == 6:
                    UnlexerRule(src=';', parent=current)
            return current
    statement.min_depth = 0

    def paren_expr(self, parent=None):
        with RuleContext(self, UnparserRule(name='paren_expr', parent=parent)) as current:
            UnlexerRule(src='(', parent=current)
            self.expr(parent=current)
            UnlexerRule(src=')', parent=current)
            return current
    paren_expr.min_depth = 6

    def expr(self, parent=None):
        with RuleContext(self, UnparserRule(name='expr', parent=parent)) as current:
            with AlternationContext(self, [5, 6], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.test(parent=current)
                elif choice0 == 1:
                    self.id_(parent=current)
                    UnlexerRule(src='=', parent=current)
                    self.expr(parent=current)
            return current
    expr.min_depth = 5

    def test(self, parent=None):
        with RuleContext(self, UnparserRule(name='test', parent=parent)) as current:
            with AlternationContext(self, [4, 4], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.sum_(parent=current)
                elif choice0 == 1:
                    self.sum_(parent=current)
                    UnlexerRule(src='<', parent=current)
                    self.sum_(parent=current)
            return current
    test.min_depth = 4

    def sum_(self, parent=None):
        with RuleContext(self, UnparserRule(name='sum_', parent=parent)) as current:
            with AlternationContext(self, [3, 4, 4], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    self.term(parent=current)
                elif choice0 == 1:
                    self.sum_(parent=current)
                    UnlexerRule(src='+', parent=current)
                    self.term(parent=current)
                elif choice0 == 2:
                    self.sum_(parent=current)
                    UnlexerRule(src='-', parent=current)
                    self.term(parent=current)
            return current
    sum_.min_depth = 3

    def term(self, parent=None):
        with RuleContext(self, UnparserRule(name='term', parent=parent)) as current:
            with AlternationContext(self, [2, 2, 7], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.id_, self.integer, self.paren_expr][choice0](parent=current)
            return current
    term.min_depth = 2

    def id_(self, parent=None):
        with RuleContext(self, UnparserRule(name='id_', parent=parent)) as current:
            self.STRING(parent=current)
            return current
    id_.min_depth = 1

    def integer(self, parent=None):
        with RuleContext(self, UnparserRule(name='integer', parent=parent)) as current:
            self.INT(parent=current)
            return current
    integer.min_depth = 1

    def STRING(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRING', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            return current
    STRING.min_depth = 0

    def INT(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INT', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    INT.min_depth = 0

    def WS(self, parent=None):
        with RuleContext(self, UnlexerRule(name='WS', parent=parent)) as current:
            UnlexerRule(src=self._model.charset(current, 0, self._charsets[3]), parent=current)
            return current
    WS.min_depth = 0

    _default_rule = program

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(97, 123)])),
        2: list(itertools.chain.from_iterable([range(48, 58)])),
        3: list(itertools.chain.from_iterable([range(9, 10), range(10, 11), range(13, 14), range(32, 33)])),
    }
